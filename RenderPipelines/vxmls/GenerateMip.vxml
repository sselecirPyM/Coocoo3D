<?xml version="1.0" encoding="utf-8" ?>
<root name="GenerateMipPass" xmlns:v="directive" xmlns:b="binding">
	<render name="Execute">
		<shader source="shader_generateMip"/>
		<script>
			<![CDATA[
        int x = input.width;
        int y = input.height;
        context.SetCBV<int>(0, [x, y]);
        context.SetSRV(0, input);
        context.SetUAV(0, output);
			]]>
		</script>
		<dispatch x="(x + 15) / 16" y="(y + 15) / 16"/>
		
		<script v:for="int i = 1; i &lt; 9; i++">
			<![CDATA[
            x = (x + 1) / 2;
            y = (y + 1) / 2;

            context.SetCBV<int>(0, [x, y]);
            context.SetSRV(0, output, i - 1);
            context.SetUAV(0, output, i);
			]]>
			<dispatch x="(x + 15) / 16" y="(y + 15) / 16"/>
		</script>
	</render>
	<script>
		public Texture2D input;
		public Texture2D output;
	</script>
	
	<hlsl name="shader_generateMip" compute="csmain">
		<code>
			<![CDATA[
cbuffer cb0 : register(b0)
{
	uint2 imageSize;
}

RWTexture2D<float4> Target : register(u0);
Texture2D Image : register(t0);
SamplerState s0 : register(s0);
[numthreads(8, 8, 1)]
void csmain(uint3 dtid : SV_DispatchThreadID)
{
	if (dtid.x < (imageSize.x + 1) / 2 && dtid.y < (imageSize.y + 1) / 2)
	{
		int2 sourcePosition = dtid.xy << 1;
		float4 colors[4];
		colors[0] = Image[sourcePosition];
		[unroll]
		for (int i = 1; i < 4; i++)
		{
			int2 pos = sourcePosition + int2((i >> 1) & 1, i & 1);
			if (pos.x < imageSize.x && pos.y < imageSize.y)
				colors[i] = Image[pos];
			else
				colors[i] = colors[0];
		}

		Target[dtid.xy] = (colors[0] + colors[1] + colors[2] + colors[3]) * 0.25;
	}
}
			]]>
		</code>
	</hlsl>
</root>