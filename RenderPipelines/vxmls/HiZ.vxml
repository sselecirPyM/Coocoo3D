<?xml version="1.0" encoding="utf-8" ?>
<root name="HiZPass" xmlns:v="directive" xmlns:b="binding">
	<render name="Execute">
		<shader source="shader_hiz1"/>
		<script>
			<![CDATA[
        int x = input.width;
        int y = input.height;
        context.SetCBV<int>(0, [x, y]);
        context.SetSRV(0, input);
        context.SetUAV(0, output);
			]]>
		</script>
		<dispatch x="(x + 15) / 16" y="(y + 15) / 16"/>
		
		<shader source="shader_hiz2"/>
		<script v:for="int i = 1; i &lt; 9; i++">
			<![CDATA[
            x = (x + 1) / 2;
            y = (y + 1) / 2;

            context.SetCBV<int>(0, [x, y]);
            context.SetSRV(0, output, i - 1);
            context.SetUAV(0, output, i);
			]]>
			<dispatch x="(x + 15) / 16" y="(y + 15) / 16"/>
		</script>
	</render>
	<script>
		public Texture2D input;
		public Texture2D output;
	</script>
	
	<hlsl name="shader_hiz1" compute="csmain">
		<code>
			<![CDATA[
Texture2D<float> input : register(t0);

RWTexture2D<float2> hiz : register(u0);
cbuffer cb0 : register(b0) {
	int2 inputSize;
}

bool validate(int2 position)
{
	return all(inputSize > position);
}

[numthreads(8, 8, 1)]
void csmain(uint3 dtid : SV_DispatchThreadID)
{
	if (!validate((int2(dtid.xy))))
		return;
	float4 val;

	val.x = input[(dtid.xy * 2) + int2(0, 0)];

	for (int i = 1; i < 4; i++)
	{
		int2 index2 = (dtid.xy * 2) + int2((i >> 1) & 1, i & 1);
		if (validate(index2))
			val[i] = input[index2];
		else
			val[i] = val.x;
	}

	float min1 = min(min(val.x, val.y), min(val.z, val.w));
	float max1 = max(max(val.x, val.y), max(val.z, val.w));
	hiz[dtid.xy] = float2(min1, max1);
}
			]]>
		</code>
	</hlsl>
	<hlsl name="shader_hiz2" compute="csmain">
		<code>
			<![CDATA[
Texture2D<float2> input : register(t0);

RWTexture2D<float2> hiz : register(u0);
cbuffer cb0 : register(b0) {
	int2 inputSize;
}

bool validate(int2 position)
{
	return all(inputSize > position);
}

[numthreads(8, 8, 1)]
void csmain(uint3 dtid : SV_DispatchThreadID)
{
	if (!validate((int2(dtid.xy))))
		return;

	float2 col[4];
	col[0].xy = input[(dtid.xy * 2) + int2(0, 0)].rg;

	for (int i = 1; i < 4; i++)
	{
		if (validate((dtid.xy * 2) + int2((i >> 1) & 1, i & 1)))
			col[i].rg = input[(dtid.xy * 2) + int2((i >> 1) & 1, i & 1)].rg;
		else
			col[i].rg = col[0].rg;
	}

	float min1 = col[0].x;
	float max1 = col[0].y;
	for(i=1; i < 4; i++)
	{
		min1 = min(min1, col[i].x);
		max1 = max(max1, col[i].y);
	}

	hiz[dtid.xy] = float2(min1, max1);
}
			]]>
		</code>
	</hlsl>
</root>